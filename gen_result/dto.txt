type ExampleReqDTO struct {
	ExampleString	string
	ExampleInt64	int64
	ExampleInt32	int32
	ExampleFloat64	float64
	ExampleFloat32	float32
	ExampleUint32	uint32
	ExampleUint64	uint64
	ExampleBool	bool
	Example	*Example
	ExampleRepeated	[]*Example
}

func PBToDTOExampleRequest(param *pb.ExampleRequest)(result *ExampleReqDTO) {
	result = &ExampleReqDTO{
		ExampleString: param.ExampleString,
		ExampleInt64: param.ExampleInt64,
		ExampleInt32: param.ExampleInt32,
		ExampleFloat64: param.ExampleFloat64,
		ExampleFloat32: param.ExampleFloat32,
		ExampleUint32: param.ExampleUint32,
		ExampleUint64: param.ExampleUint64,
		ExampleBool: param.ExampleBool,
		Example: param.Example,
		ExampleRepeated: param.ExampleRepeated,
	}

	return result
}

type ExampleRespDTO struct {
	ErrCode	int64
	ErrMsg	string
}

func DTOToPBExampleResponse(param *ExampleRespDTO)(result *pb.ExampleResponse) {
	result = &pb.ExampleResponse{
		ErrCode: param.ErrCode,
		ErrMsg: param.ErrMsg,
	}

	return result
}

type Example struct {
	Key	string
	Value	string
}

func PBToDTOExample(param *pb.Example) (result *Example){
	if param == nil {
		 return nil
	}
	result = &Example{
		Key: param.Key,
		Value: param.Value,
	}
	return result
}

func PBToDTOExampleSlice(pbList []*pb.Example) (dtoList []*Example) {
	dtoList = make([]*Example,0,len(pbList))
	 for _, item := range pbList {
		 dtoList = append(dtoList,PBToDTOExample(item))
	}
	return dtoList
}

func DTOToPBExample(param *Example) (result *pb.Example){
	if param == nil {
		 return nil
	}
	result = &pb.Example{
		Key: param.Key,
		Value: param.Value,
	}
	return result
}

func DTOToPBExampleSlice(dtoList []*Example) (pbList []*pb.Example) {
	pbList = make([]*pb.Example,0,len(dtoList))
	 for _, item := range dtoList {
		 pbList = append(pbList,DTOToPBExample(item))
	}
	return pbList
}

